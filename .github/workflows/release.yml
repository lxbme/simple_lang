name: Build and Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            cc: gcc
            cxx: g++
          # - os: ubuntu-latest
          #   cc: clang
          #   cxx: clang++
          - os: windows-latest
            cc: cl
            cxx: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set up environment
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          sudo apt-get install -y build-essential cmake
        fi
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          choco install visualstudio2022buildtools --include-optional
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        fi
      shell: bash

    - name: Configure CMake
      run: |
        cmake -B build -S . -DCMAKE_C_COMPILER=${{ matrix.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build build --config Release

    - name: Archive the build (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p temp_build
        cp -r build/* temp_build/
        tar -czvf build/linux_${{ matrix.cc }}.tar.gz -C temp_build .
      shell: bash

    - name: Archive the build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir temp_build
        Copy-Item -Recurse -Path build\* -Destination temp_build
        Compress-Archive -Path temp_build\* -DestinationPath build\windows_${{ matrix.cc }}.zip
      shell: powershell

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}-${{ matrix.cc }}
        path: |
          build/linux_*.tar.gz
          build/windows_*.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-ubuntu-latest-gcc
        path: ./builds
    # - name: Download build artifacts
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: build-ubuntu-latest-clang
    #     path: ./builds
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-windows-latest-cl
        path: ./builds

    - name: Create GitHub Release
      id: create_release  # add id
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Auto Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./builds/linux_gcc.tar.gz
        asset_name: linux_gcc.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./builds/linux_clang.tar.gz
        asset_name: linux_clang.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./builds/windows_cl.zip
        asset_name: windows_cl.zip
        asset_content_type: application/zip

